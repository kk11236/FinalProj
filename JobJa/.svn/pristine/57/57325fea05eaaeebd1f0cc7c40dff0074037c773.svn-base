<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jobJa.board.mapper.BoardEntReviewMapper">
	
	
	<sql id="order">
		<choose>
			<when test = "sortBy=='newest'">
				ORDER BY REG_DATE DESC
			</when>
			<when test = "sortBy=='oldest'">
				ORDER BY REG_DATE ASC
			</when>
			<when test = "sortBy=='pointDesc'">
				ORDER BY (er.ENT_REV_CHANCES + er.ENT_REV_WELFARE +er.ENT_REV_BALANCE + er.ENT_REV_CULTURE + er.ENT_REV_MANAGER) DESC
			</when>
			<when test = "sortBy=='pointAsc'">
				ORDER BY (er.ENT_REV_CHANCES + er.ENT_REV_WELFARE +er.ENT_REV_BALANCE + er.ENT_REV_CULTURE + er.ENT_REV_MANAGER) ASC
			</when>
			<otherwise>
				ORDER BY REG_DATE DESC
			</otherwise>
		</choose>
	</sql>
	
	<insert id="createPost" parameterType="boardEntReviewVO">
		<selectKey resultType="String" order="BEFORE" keyProperty="entRevNo">
			SELECT 'REV' || NVL(TRIM(TO_CHAR(SUBSTR(MAX(ENT_REV_NO),4) + 1,'00000')),'00001')
			FROM   ENT_REVIEW
		</selectKey>
	
		INSERT INTO ENT_REVIEW
		(
		ENT_REV_NO
		, ENT_NO
		, MEM_ID
		, ENT_REV_WORK_YN
		, ENT_REV_WORK_LOC
		, JOB_CATEGORY_CD
		, JOB_CD
		, ENT_REV_EMPL_TYPE
		, ENT_REV_SHORT_REVIEW
		, ENT_REV_PROS
		, ENT_REV_CONS
		, ENT_REV_WISHES
		, ENT_REV_CHANCES
		, ENT_REV_WELFARE
		, ENT_REV_BALANCE
		, ENT_REV_CULTURE
		, ENT_REV_MANAGER
		, ENT_REV_CEO_VIEW
		, ENT_REV_POTENTIAL
		, ENT_REV_RECOMEND_YN
		, REG_DATE)
		VALUES
		(
		#{entRevNo},
		#{entNo},
		#{memId},
		#{entRevWorkYn},
		#{entRevWorkLoc},
		#{jobCategoryCd},
		#{jobCd},
		#{entRevEmplType},
		#{entRevShortReview},
		#{entRevPros},
		#{entRevCons},
		#{entRevWishes},
		#{entRevChances},
		#{entRevWelfare},
		#{entRevBalance},
		#{entRevCulture},
		#{entRevManager},
		#{entRevCeoView},
		#{entRevPotential},
		#{entRevRecomendYn},
		SYSDATE
		)
	</insert>
	
	<resultMap type="boardEntReviewVO" id="boardEntReviewMap">
		<id property="entRevNo" column="ENT_REV_NO"/>
		<result property="entNo" column="ENT_NO"/>
		<result property="memId" column="MEM_ID"/>
		<result property="entRevWorkYn" column="ENT_REV_WORK_YN"/>
		<result property="entRevWorkLoc" column="ENT_REV_WORK_LOC"/>
		<result property="jobCategoryCd" column="JOB_CATEGORY_CD"/>
		<result property="jobCd" column="JOB_CD"/>
		<result property="entRevEmplType" column="ENT_REV_EMPL_TYPE"/>
		<result property="entRevShortReview" column="ENT_REV_SHORT_REVIEW"/>
		<result property="entRevPros" column="ENT_REV_PROS"/>
		<result property="entRevCons" column="ENT_REV_CONS"/>
		<result property="entRevWishes" column="ENT_REV_WISHES"/>
		<result property="entRevChances" column="ENT_REV_CHANCES"/>
		<result property="entRevWelfare" column="ENT_REV_WELFARE"/>
		<result property="entRevBalance" column="ENT_REV_BALANCE"/>
		<result property="entRevCulture" column="ENT_REV_CULTURE"/>
		<result property="entRevManager" column="ENT_REV_MANAGER"/>
		<result property="entRevCeoView" column="ENT_REV_CEO_VIEW"/>
		<result property="entRevPotential" column="ENT_REV_POTENTIAL"/>
		<result property="entRevRecomendYn" column="ENT_REV_RECOMEND_YN"/>
		<result property="regDate" column="REG_DATE"/>
		<association property="comCodeVO" resultMap="comCodeMap"></association>
		<association property="comDetCodeVO" resultMap="comDetCodeMap"></association>
		<collection property="likeVOList" ofType="likesVO" resultMap="likeMap"></collection>
	</resultMap>
	<resultMap type="comCodeInfoVO" id="comCodeMap">
		<result property="comCd" column="COM_CD"/>
		<result property="comCdNm" column="COM_CD_NM"/>
		<result property="comCdDescriptions" column="COM_CD_DESCRIPTIONS"/>
	</resultMap>
	<resultMap type="comDetCodeInfoVO" id="comDetCodeMap">
		<result property="comDetCd" column="COM_DET_CD"/>
		<result property="comCd" column="COM_CD"/>
		<result property="comDetCdNm" column="COM_DET_CD_NM"/>
		<result property="comDetDescriptions" column="COM_DET_DESCRIPTIONS"/>
	</resultMap>
	<resultMap type="likesVO" id="likeMap">
		<id property="boardId" column="BOARD_ID"/>
		<!-- result의 column은 테이블의 컬럼명이 아니라, SQL문의 실행 결과의 column 명이다 -->
		<!-- 따라서 AS로 alias를 준 후에 그 alias에 column을 맞추면 알맞게 매핑된다 -->
		<id property="memId" column="LIKE_ID"/>
	</resultMap>
	<select id="getByEntNo" parameterType="hashMap" resultMap="boardEntReviewMap">
		 SELECT T.*
			FROM
			(
				SELECT DENSE_RANK() OVER(<include refid="order"></include>, er.ENT_REV_NO DESC) RNUM 
					, ENT_REV_NO 
					, er.ENT_NO
					, er.MEM_ID
					, er.ENT_REV_WORK_YN
					, er.ENT_REV_WORK_LOC
					, er.JOB_CATEGORY_CD
					, er.JOB_CD
					, er.ENT_REV_EMPL_TYPE
					, er.ENT_REV_SHORT_REVIEW
					, er.ENT_REV_PROS
					, er.ENT_REV_CONS
					, er.ENT_REV_WISHES
					, er.BOARD_LIKE
					, er.ENT_REV_CHANCES
					, er.ENT_REV_WELFARE
					, er.ENT_REV_BALANCE
					, er.ENT_REV_CULTURE
					, er.ENT_REV_MANAGER
					, er.ENT_REV_CEO_VIEW
					, er.ENT_REV_POTENTIAL
					, er.ENT_REV_RECOMEND_YN
					, er.REG_DATE
		            , cci.COM_CD
		            , cci.COM_CD_NM
		            , cci.COM_CD_DESCRIPTIONS
		            , cdci.COM_DET_CD
		            , cdci.COM_DET_CD_NM
		            , cdci.COM_DET_DESCRIPTIONS
		            , lk.BOARD_ID
		            , lk.MEM_ID as LIKE_ID
		        FROM ENT_REVIEW er 
		            LEFT OUTER JOIN COM_CODE_INFO cci ON er.JOB_CATEGORY_CD = cci.COM_CD
		            LEFT OUTER JOIN COM_DET_CODE_INFO cdci ON er.JOB_CD = cdci.COM_DET_CD
		            LEFT OUTER JOIN LIKES lk ON er.ENT_REV_NO = lk.BOARD_ID
				WHERE ENT_NO=#{entNo}
			) T
			WHERE T.RNUM BETWEEN (#{currentPage} * #{size}) - (#{size} - 1) and (#{currentPage} * #{size})
	</select>
	
	
	<update id="ajaxLikeUp" parameterType="boardEntReviewVO">
		UPDATE ENT_REVIEW SET BOARD_LIKE = BOARD_LIKE + 1
		WHERE ENT_REV_NO=#{entRevNo}
	</update>
	
	
	<update id="ajaxLikeCancel" parameterType="boardQNAVO">
		UPDATE ENT_REVIEW SET BOARD_LIKE = BOARD_LIKE - 1
		WHERE ENT_REV_NO=#{entRevNo}
	</update>
	
	<select id="getTotalCount" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM ENT_REVIEW
		WHERE ENT_NO = #{entNo}
	</select>
	
</mapper>