<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="tiles" uri="http://tiles.apache.org/tags-tiles" %>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"  %>
<script type="text/javascript" src="/resources/js/jquery-3.6.0.js"></script>

<style>
.pagination {
	display: flex;
	list-style: none;
	padding-left: 45%;
}

.pagez  li.is_active {
	font-weight: bold;
	border-bottom: 3px solid #2ecc71;
}

.pagez .pagination a {
	display: inline-block;
	color: #222;
}

.pagez .pagination ul {
	margin: 0;
	padding: 0;
	list-style-type: none;
	display: flex;
	justify-content: center;
}

.pagez.pagination {
	padding: 30px 0;
}

.pagez .paginate_button {
	margin: 0 15px;
}

.pagez  .disabled {
	pointer-events: none;
	cursor: default;
}

.pagez  .disabled a {
	color: #ccc;
}

.inner-box2 {
    background-color: white;
    border-radius: 24px;
    height: 320px;
    padding: 40px 30px;
    margin-bottom:20px;
}

.inner-box2:hover {
	background-color: white;
	border-radius: 24px;
	height: 320px;
	padding: 40px 30px;
	border: 1px solid #5b72ec;
}

.div-files {
    display: flex;
    flex-direction: column;
}

.file-list {
    width: 100%;
    height: 72px;
    border: 1px solid rgb(229, 230, 233);
    border-radius: 12px;
    padding: 20px 24px;
    display: flex;
    -webkit-box-align: center;
    align-items: center;
    box-sizing: border-box;
	list-style-type: none;
	padding: 0;
	display: flex;
	flex-wrap: wrap;
}

.file-title{
  font-weight: bold; 
  font-size: 24px; 
}

.file-list {
    list-style-type: none;
    padding: 0;
    display: flex;
    flex-direction: row; /* 가로로 배열하도록 설정 */
    flex-wrap: wrap; /* 필요하면 줄바꿈이 일어날 수 있도록 설정 */
}

.file-list li {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border: 1px solid #ccc;
    margin-right: 5px; /* 각 아이템 사이의 간격을 조절 */
    margin-bottom: 5px;
	padding: 5px;
}

.file-list li button {
    cursor: pointer;
}


</style>

<div class="cen" style="margin: 50px auto;">
	<p class="main-h1">이력서 목록</p>
	
	<c:forEach var="resumeVO" items="${data}" >
		<a href="/mypageMem/memberDetailResume?resumeNo=${resumeVO.resumeNo}">
			<div class="inner-box2">
				<div>
					<label>이력서 제목 : ${resumeVO.resumeTitle}</label><br>
					<label>이력서 스킬 : ${resumeVO.resumeSkill}</label><br>
				</div>
			</div>
		</a>
	</c:forEach>
	<div class="pagez">${info.getPagingArea()}
	</div>
	
	
	
	
</div>


 <script type="text/javascript">
	let files = [];
	
	$(function(){
		$(document).on("click",".deleteIcon",function(){
			// <button type="button" class="deleteIcon" data-afd-seq="6" data-af-id="a111">Delete</button>
			let afdSeq = $(this).data("afdSeq");
			let afId = $(this).data("afId");
			
			$(this).parent().parent().parent().remove();
			
			let data = {
				"afdSeq":afdSeq,
				"afId":afId
			};
			
			console.log("data : ", data);
			
			$.ajax({
				url:"/mypageMem/deleteFileAjax",
				contentType:"application/json;charset=utf-8",
				data:JSON.stringify(data),
				type:"post",
				dataType:"text",
				beforeSend:function(xhr){
					xhr.setRequestHeader("${_csrf.headerName}","${_csrf.token}");
				},
				success:function(result){
					console.log("result : ", result);
				}
			});
			
		});
	});
	
	function handleFileSelect() {
	    const fileInput = document.getElementById('fileInput');
	    const fileListsContainer = document.getElementById('fileListsContainer');
	    
	    const file = fileInput.files[0];
	    if (file) {
	    	
	        const uploadFile = new FormData();
	        uploadFile.append('uploadFile', file);
	        
	        files.push(file);
	
	        $.ajax({
	            url: '/mypageMem/uploadFile',
	            type: 'POST',
	            data: uploadFile,
	            contentType: false,
	            processData: false,
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
                },
	            success: function(atchFileDetailVO) {
	                // 서버 응답에 대한 처리를 원하는 대로 추가
	                //response : atchFileDetailVO
	                console.log("atchFileDetailVO : " ,atchFileDetailVO);
	                
	                const ul = document.createElement('ul');
	    	        ul.classList.add('file-list');
	    	        const li = document.createElement('li');
	    	        li.innerHTML =
	    	            '<div><a href="#" onclick="downloadFile(this)">' + file.name + '</a></div>' +
// 	     	            '<div>' + formatBytes(file.size) + '</div>' +
	    	            '<div><button type="button" class="deleteIcon" data-afd-seq="'+atchFileDetailVO.afdSeq+'" data-af-id="'+atchFileDetailVO.afId+'">Delete</button></div>';
	    	        ul.appendChild(li);
	    	
	    	        fileListsContainer.appendChild(ul);
	            },
	            error: function(error) {
	                // 에러 발생 시 처리를 원하는 대로 추가
	                console.error('File upload failed:', error);
	            }
	        });
	    }
	}
	
	
// 	function formatBytes(bytes, decimals = 2) {
// 	    if (bytes === 0) return '0 Bytes';
	
// 	    const k = 1024;
// 	    const dm = decimals < 0 ? 0 : decimals;
// 	    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
	
// 	    const i = Math.floor(Math.log(bytes) / Math.log(k));
	
// 	    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
// 	}
</script>